(*
	VAR
		(* OpenBSD: stdin, stdout, stderr *)
			__sF*: ARRAY [untagged] 3 OF FILE; (* OpenBSD 5.8 /usr/include/stdio.h *)
				(*
					stdin = SYSTEM.ADR(__sF[0])
					stdout = SYSTEM.ADR(__sF[1])
					stderr = SYSTEM.ADR(__sF[2])
				*)
*)

	PROCEDURE [ccall] __errno_location* ["__errno"] (): PtrVoid;

	(* POSIX.1 *)
		PROCEDURE [ccall] stat* (path: PtrSTR; VAR sp: stat_t): int;

		PROCEDURE [ccall] lseek* (d: int; offset: off_t; whence: int): off_t;

	(* XPG4 *)
		PROCEDURE [ccall] fseeko* (stream: PtrFILE; offset: off_t; whence: int): int;

	(* POSIX.1 *)
		PROCEDURE [ccall] sigsetjmp* (VAR env: sigjmp_buf; savemask: int): int;
		PROCEDURE [ccall] siglongjmp* (VAR env: sigjmp_buf; val: int);

	(* POSIX.1 *)
		PROCEDURE [ccall] sigemptyset* (set: PtrSigset_t): int;
		PROCEDURE [ccall] sigfillset* (set: PtrSigset_t): int;
		PROCEDURE [ccall] sigaddset* (set: PtrSigset_t; signo: int): int;
		PROCEDURE [ccall] sigprocmask* (how: int; set: PtrSigset_t; oset: PtrSigset_t): int;

	(* POSIX.1 *)
		PROCEDURE [ccall] sigaction* (sig: int; VAR [nil] act: sigaction_t; VAR [nil] oact: sigaction_t): int;

	(* BSD *)
		PROCEDURE [ccall] sigaltstack* (VAR [nil] ss: stack_t; VAR [nil] oss: stack_t): int;

	(* POSIX.1 *)
		PROCEDURE [ccall] clock_gettime* (clock_id: clockid_t; VAR tp: timespec_t): int;

	(* AT&T UNIX *)
		PROCEDURE [ccall] time* (VAR [nil] tloc: time_t): time_t;

	(* AT&T UNIX *)
		PROCEDURE [ccall] gmtime* (VAR [nil] clock: time_t): tm;
		PROCEDURE [ccall] localtime* (VAR [nil] clock: time_t): tm;
		PROCEDURE [ccall] mktime* (VAR tm: tmDesc): time_t;

	(* POSIX.1 *)
		PROCEDURE [ccall] opendir* (filename: PtrSTR): PtrDIR;
		PROCEDURE [ccall] readdir* (dirp: PtrDIR): PtrDirent;
