MODULE EncStdMap_hp_roman8;

	(* This file was generated automatically *)

	(* Source: Python *)

	IMPORT Codecs := EncCodecs;

	TYPE
		Encoder = POINTER TO RECORD (Codecs.Encoder) END;
		Decoder = POINTER TO RECORD (Codecs.Decoder) END;

	(* Encoder *)

	PROCEDURE (e: Encoder) Encode (IN f: ARRAY OF CHAR; VAR fR, fLen: INTEGER; VAR t: ARRAY OF SHORTCHAR; VAR tW: INTEGER);
		VAR x, y: INTEGER;
	BEGIN
		WHILE fLen > 0 DO
			x := ORD(f[fR]);
			CASE x OF
			| 00H..0A0H: y := 00H + x
			| 0AFH: y := 0B0H
			| 0A8H,0B0H: y := 03H + x
			| 0D6H: y := 0DAH
			| 2014H: y := 0F6H
			| 0FAH: y := 0C7H
			| 0C5H,0D4H: y := 0BH + x
			| 0C6H: y := 0D3H
			| 0DEH: y := 0F0H
			| 0C9H,0D0H,0DAH: y := 13H + x
			| 0C4H,0D3H,0D5H: y := 14H + x
			| 0A4H,0A7H,0D2H: y := 16H + x
			| 0A1H,0A5H: y := 17H + x
			| 0A3H,0CDH: y := 18H + x
			| 0CCH: y := 0E6H
			| 0A2H: y := 0BFH
			| 0C3H: y := 0E1H
			| 0C1H: y := 0E0H
			| 02DCH: y := 0ACH
			| 25A0H: y := 0FCH
			| 0192H: y := 0BEH
			| 20A4H: y := 0AFH
			| 0FDH: y := 0B2H
			| 0BEH: y := 0F5H
			| 0B7H,0BCH,0BDH: y := 3BH + x
			| 0B5H,0B6H: y := 3EH + x
			| 0BAH: y := 0FAH
			| 0BBH: y := 0FDH
			| 0160H,0161H: y := -75H + x
			| 0F1H: y := 0B7H
			| 0FBH: y := 0C3H
			| 0B1H: y := 0FEH
			| 0E7H,0F4H: y := -32H + x
			| 0AAH: y := 0F9H
			| 0ABH: y := 0FBH
			| 0F9H: y := 0CBH
			| 0DBH,0F3H,0FCH: y := -2DH + x
			| 0D9H,0DDH: y := -2CH + x
			| 0EAH: y := 0C1H
			| 0CEH,0CFH,0F2H,0F6H: y := -28H + x
			| 0CAH,0CBH: y := -26H + x
			| 0C8H: y := 0A3H
			| 0E9H: y := 0C5H
			| 0E2H,0F8H: y := -22H + x
			| 0C2H: y := 0A2H
			| 0C0H,0E8H: y := -1FH + x
			| 0EBH: y := 0CDH
			| 0E1H,0EEH: y := -1DH + x
			| 02C6H: y := 0AAH
			| 0D1H: y := 0B6H
			| 0E0H,0E4H,0EDH: y := -18H + x
			| 0C7H,0ECH: y := -13H + x
			| 0EFH: y := 0DDH
			| 0E5H: y := 0D4H
			| 0FFH: y := 0EFH
			| 0E6H: y := 0D7H
			| 0FEH: y := 0F1H
			| 0B4H,0F0H: y := -0CH + x
			| 0F5H: y := 0EAH
			| 0178H: y := 0EEH
			| 02CBH: y := 0A9H
			| 0BFH,0D8H: y := -06H + x
			| 0DCH,0DFH,0E3H: y := -01H + x
			ELSE
				RETURN
			END;
			t[tW] := SHORT(CHR(y)); INC(tW);
			INC(fR); DEC(fLen)
		END
	END Encode;

	PROCEDURE NewEncoder* (): Codecs.Encoder;
		VAR e: Encoder;
	BEGIN
		NEW(e); RETURN e
	END NewEncoder;

	(* Decoder *)

	PROCEDURE (d: Decoder) Decode (IN f: ARRAY OF SHORTCHAR; VAR fR, fLen: INTEGER; VAR t: ARRAY OF CHAR; VAR tW: INTEGER; OUT state: BOOLEAN);
		VAR x, y: INTEGER;
	BEGIN
		WHILE fLen > 0 DO
			x := ORD(f[fR]);
			CASE x OF
			| 00H..0A0H: y := 00H + x
			| 0DBH,0DEH,0E2H: y := 01H + x
			| 0B9H,0D2H: y := 06H + x
			| 0EEH: y := 0178H
			| 0EAH: y := 0F5H
			| 0A8H,0E4H: y := 0CH + x
			| 0F1H: y := 0FEH
			| 0D7H: y := 0E6H
			| 0EFH: y := 0FFH
			| 0D4H: y := 0E5H
			| 0DDH: y := 0EFH
			| 0B4H,0D9H: y := 13H + x
			| 0C8H,0CCH,0D5H: y := 18H + x
			| 0B6H: y := 0D1H
			| 0AAH: y := 02C6H
			| 0C4H,0D1H: y := 1DH + x
			| 0CDH: y := 0EBH
			| 0A1H,0C9H: y := 1FH + x
			| 0A2H: y := 0C2H
			| 0FBH: y := 0ABH
			| 0A9H: y := 02CBH
			| 0C5H: y := 0E9H
			| 0A3H: y := 0C8H
			| 0A4H,0A5H: y := 26H + x
			| 0A6H,0A7H,0CAH,0CEH: y := 28H + x
			| 0C1H: y := 0EAH
			| 0ADH,0B1H: y := 2CH + x
			| 0AEH,0C6H,0CFH: y := 2DH + x
			| 0CBH: y := 0F9H
			| 0ACH: y := 02DCH
			| 0F9H: y := 0AAH
			| 0B5H,0C2H: y := 32H + x
			| 0C7H: y := 0FAH
			| 0F6H: y := 2014H
			| 0C3H: y := 0FBH
			| 0B7H: y := 0F1H
			| 0EBH,0ECH: y := 75H + x
			| 0FDH: y := 0BBH
			| 0D0H,0DFH: y := -0BH + x
			| 0FAH: y := 0BAH
			| 0F3H,0F4H: y := -3EH + x
			| 0F2H,0F7H,0F8H: y := -3BH + x
			| 0F5H: y := 0BEH
			| 0B2H: y := 0FDH
			| 0C0H,0D6H: y := 22H + x
			| 0BEH: y := 0192H
			| 0FCH: y := 25A0H
			| 0E0H: y := 0C1H
			| 0E1H: y := 0C3H
			| 0BFH: y := 0A2H
			| 0E6H: y := 0CCH
			| 0BBH,0E5H: y := -18H + x
			| 0B8H,0BCH: y := -17H + x
			| 0BAH,0BDH,0E8H: y := -16H + x
			| 0D8H,0E7H,0E9H: y := -14H + x
			| 0DCH,0E3H,0EDH: y := -13H + x
			| 0F0H: y := 0DEH
			| 0FEH: y := 0B1H
			| 0D3H: y := 0C6H
			| 0AFH: y := 20A4H
			| 0DAH: y := 0D6H
			| 0ABH,0B3H: y := -03H + x
			| 0B0H: y := 0AFH
			ELSE
				RETURN
			END;
			t[tW] := CHR(y); INC(tW);
			INC(fR); DEC(fLen)
		END;
		state := FALSE
	END Decode;

	PROCEDURE (d: Decoder) Reset, EMPTY;

	PROCEDURE NewDecoder* (): Codecs.Decoder;
		VAR d: Decoder;
	BEGIN
		NEW(d); RETURN d
	END NewDecoder;

END EncStdMap_hp_roman8.