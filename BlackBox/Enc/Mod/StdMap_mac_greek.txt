MODULE EncStdMap_mac_greek;

	(* This file was generated automatically *)

	(* Source: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/MAC/GREEK.TXT *)

	IMPORT Codecs := EncCodecs;

	TYPE
		Encoder = POINTER TO RECORD (Codecs.Encoder) END;
		Decoder = POINTER TO RECORD (Codecs.Decoder)
			b: INTEGER;
			st: INTEGER; (* 0 - no state, > 0 - number of chars expected, -1 - error *)
		END;

	(* Encoder *)

	PROCEDURE (e: Encoder) Encode (IN f: ARRAY OF CHAR; VAR fR, fLen: INTEGER; VAR t: ARRAY OF SHORTCHAR; VAR tW: INTEGER);
		VAR x, y: INTEGER;
	BEGIN
		WHILE fLen > 0 DO
			x := ORD(f[fR]);
			CASE x OF
			| 00H..7FH: y := x
			| 0A0H: y := 0CAH
			| 0A3H: y := 92H
			| 0A5H: y := 0B4H
			| 0A6H: y := 9BH
			| 0A7H: y := 0ACH
			| 0A8H: y := 8CH
			| 0A9H: y := 0A9H
			| 0ABH: y := 0C7H
			| 0ACH: y := 0C2H
			| 0ADH: y := 9CH
			| 0AEH: y := 0A8H
			| 0B0H: y := 0AEH
			| 0B1H: y := 0B1H
			| 0B2H: y := 82H
			| 0B3H: y := 84H
			| 0B9H: y := 81H
			| 0BBH: y := 0C8H
			| 0BDH: y := 97H
			| 0C4H: y := 80H
			| 0C9H: y := 83H
			| 0D6H: y := 85H
			| 0DCH: y := 86H
			| 0DFH: y := 0A7H
			| 0E0H: y := 88H
			| 0E2H: y := 89H
			| 0E4H: y := 8AH
			| 0E7H: y := 8DH
			| 0E8H: y := 8FH
			| 0E9H: y := 8EH
			| 0EAH..0EBH: y := x - 5AH
			| 0EEH..0EFH: y := x - 5AH
			| 0F4H: y := 99H
			| 0F6H: y := 9AH
			| 0F7H: y := 0D6H
			| 0F9H: y := 9DH
			| 0FBH..0FCH: y := x - 5DH
			| 0153H: y := 0CFH
			| 0384H: y := 8BH
			| 0385H: y := 87H
			| 0386H: y := 0CDH
			| 0387H: y := 0AFH
			| 0388H: y := 0CEH
			| 0389H..038AH: y := x - 02B2H
			| 038CH: y := 0D9H
			| 038EH: y := 0DAH
			| 038FH: y := 0DFH
			| 0390H: y := 0FDH
			| 0391H: y := 0B0H
			| 0392H: y := 0B5H
			| 0393H..0394H: y := x - 02F2H
			| 0395H..0397H: y := x - 02DFH
			| 0398H: y := 0A3H
			| 0399H..039AH: y := x - 02E0H
			| 039BH: y := 0A4H
			| 039CH: y := 0BBH
			| 039DH: y := 0C1H
			| 039EH: y := 0A5H
			| 039FH: y := 0C3H
			| 03A0H: y := 0A6H
			| 03A1H: y := 0C4H
			| 03A3H: y := 0AAH
			| 03A4H: y := 0C6H
			| 03A5H: y := 0CBH
			| 03A6H: y := 0BCH
			| 03A7H: y := 0CCH
			| 03A8H..03A9H: y := x - 02EAH
			| 03AAH: y := 0ABH
			| 03ABH: y := 0BDH
			| 03ACH: y := 0C0H
			| 03ADH..03AFH: y := x - 02D2H
			| 03B0H: y := 0FEH
			| 03B1H..03B2H: y := x - 02D0H
			| 03B3H: y := 0E7H
			| 03B4H..03B5H: y := x - 02D0H
			| 03B6H: y := 0FAH
			| 03B7H: y := 0E8H
			| 03B8H: y := 0F5H
			| 03B9H: y := 0E9H
			| 03BAH..03BDH: y := x - 02CFH
			| 03BEH: y := 0EAH
			| 03BFH..03C0H: y := x - 02D0H
			| 03C1H: y := 0F2H
			| 03C2H: y := 0F7H
			| 03C3H..03C4H: y := x - 02D0H
			| 03C5H: y := 0F9H
			| 03C6H: y := 0E6H
			| 03C7H: y := 0F8H
			| 03C8H: y := 0E3H
			| 03C9H: y := 0F6H
			| 03CAH..03CBH: y := x - 02CFH
			| 03CCH: y := 0DEH
			| 03CDH: y := 0E0H
			| 03CEH: y := 0F1H
			| 2013H: y := 0D0H
			| 2015H: y := 0D1H
			| 2018H..2019H: y := x - 1F44H
			| 201CH..201DH: y := x - 1F4AH
			| 2020H: y := 0A0H
			| 2022H: y := 96H
			| 2026H: y := 0C9H
			| 2030H: y := 98H
			| 2122H: y := 93H
			| 2248H: y := 0C5H
			| 2260H: y := 0ADH
			| 2264H..2265H: y := x - 21B2H
			ELSE
				RETURN
			END;
			t[tW] := SHORT(CHR(y)); INC(tW);
			INC(fR);
			DEC(fLen)
		END
	END Encode;

	PROCEDURE NewEncoder* (): Codecs.Encoder;
		VAR e: Encoder;
	BEGIN
		NEW(e); RETURN e
	END NewEncoder;

	(* Decoder *)

	PROCEDURE (d: Decoder) Decode (IN f: ARRAY OF SHORTCHAR; VAR fR, fLen: INTEGER; VAR t: ARRAY OF CHAR; VAR tW: INTEGER; OUT state: BOOLEAN);
		VAR x, y: INTEGER;
	BEGIN
		WHILE fLen > 0 DO
			x := ORD(f[fR]);

			CASE x OF
			| 00H..7FH: y := x
			| 80H: y := 0C4H
			| 81H: y := 0B9H
			| 82H: y := 0B2H
			| 83H: y := 0C9H
			| 84H: y := 0B3H
			| 85H: y := 0D6H
			| 86H: y := 0DCH
			| 87H: y := 0385H
			| 88H: y := 0E0H
			| 89H: y := 0E2H
			| 8AH: y := 0E4H
			| 8BH: y := 0384H
			| 8CH: y := 0A8H
			| 8DH: y := 0E7H
			| 8EH: y := 0E9H
			| 8FH: y := 0E8H
			| 90H..91H: y := x + 5AH
			| 92H: y := 0A3H
			| 93H: y := 2122H
			| 94H..95H: y := x + 5AH
			| 96H: y := 2022H
			| 97H: y := 0BDH
			| 98H: y := 2030H
			| 99H: y := 0F4H
			| 9AH: y := 0F6H
			| 9BH: y := 0A6H
			| 9CH: y := 0ADH
			| 9DH: y := 0F9H
			| 9EH..9FH: y := x + 5DH
			| 0A0H: y := 2020H
			| 0A1H..0A2H: y := x + 02F2H
			| 0A3H: y := 0398H
			| 0A4H: y := 039BH
			| 0A5H: y := 039EH
			| 0A6H: y := 03A0H
			| 0A7H: y := 0DFH
			| 0A8H: y := 0AEH
			| 0A9H: y := 0A9H
			| 0AAH: y := 03A3H
			| 0ABH: y := 03AAH
			| 0ACH: y := 0A7H
			| 0ADH: y := 2260H
			| 0AEH: y := 0B0H
			| 0AFH: y := 0387H
			| 0B0H: y := 0391H
			| 0B1H: y := 0B1H
			| 0B2H..0B3H: y := x + 21B2H
			| 0B4H: y := 0A5H
			| 0B5H: y := 0392H
			| 0B6H..0B8H: y := x + 02DFH
			| 0B9H..0BAH: y := x + 02E0H
			| 0BBH: y := 039CH
			| 0BCH: y := 03A6H
			| 0BDH: y := 03ABH
			| 0BEH..0BFH: y := x + 02EAH
			| 0C0H: y := 03ACH
			| 0C1H: y := 039DH
			| 0C2H: y := 0ACH
			| 0C3H: y := 039FH
			| 0C4H: y := 03A1H
			| 0C5H: y := 2248H
			| 0C6H: y := 03A4H
			| 0C7H: y := 0ABH
			| 0C8H: y := 0BBH
			| 0C9H: y := 2026H
			| 0CAH: y := 0A0H
			| 0CBH: y := 03A5H
			| 0CCH: y := 03A7H
			| 0CDH: y := 0386H
			| 0CEH: y := 0388H
			| 0CFH: y := 0153H
			| 0D0H: y := 2013H
			| 0D1H: y := 2015H
			| 0D2H..0D3H: y := x + 1F4AH
			| 0D4H..0D5H: y := x + 1F44H
			| 0D6H: y := 0F7H
			| 0D7H..0D8H: y := x + 02B2H
			| 0D9H: y := 038CH
			| 0DAH: y := 038EH
			| 0DBH..0DDH: y := x + 02D2H
			| 0DEH: y := 03CCH
			| 0DFH: y := 038FH
			| 0E0H: y := 03CDH
			| 0E1H..0E2H: y := x + 02D0H
			| 0E3H: y := 03C8H
			| 0E4H..0E5H: y := x + 02D0H
			| 0E6H: y := 03C6H
			| 0E7H: y := 03B3H
			| 0E8H: y := 03B7H
			| 0E9H: y := 03B9H
			| 0EAH: y := 03BEH
			| 0EBH..0EEH: y := x + 02CFH
			| 0EFH..0F0H: y := x + 02D0H
			| 0F1H: y := 03CEH
			| 0F2H: y := 03C1H
			| 0F3H..0F4H: y := x + 02D0H
			| 0F5H: y := 03B8H
			| 0F6H: y := 03C9H
			| 0F7H: y := 03C2H
			| 0F8H: y := 03C7H
			| 0F9H: y := 03C5H
			| 0FAH: y := 03B6H
			| 0FBH..0FCH: y := x + 02CFH
			| 0FDH: y := 0390H
			| 0FEH: y := 03B0H
			ELSE
				d.st := -1; RETURN
			END;

			t[tW] := CHR(y); INC(tW);

			INC(fR);
			DEC(fLen)
		END;

		IF d.st = 0 THEN state := FALSE
		ELSIF d.st > 0 THEN state := TRUE
		ELSE HALT(100)
		END
	END Decode;

	PROCEDURE (d: Decoder) Reset;
	BEGIN
		d.st := 0
	END Reset;

	PROCEDURE NewDecoder* (): Codecs.Decoder;
		VAR d: Decoder;
	BEGIN
		NEW(d); d.Reset; RETURN d
	END NewDecoder;

END EncStdMap_mac_greek.