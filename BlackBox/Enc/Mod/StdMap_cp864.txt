MODULE EncStdMap_cp864;

	(* This file was generated automatically *)

	(* Source: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/PC/CP864.TXT *)

	IMPORT Codecs := EncCodecs;

	TYPE
		Encoder = POINTER TO RECORD (Codecs.Encoder) END;
		Decoder = POINTER TO RECORD (Codecs.Decoder)
			b: INTEGER;
			st: INTEGER; (* 0 - no state, > 0 - number of chars expected, -1 - error *)
		END;

	(* Encoder *)

	PROCEDURE (e: Encoder) Encode (IN f: ARRAY OF CHAR; VAR fR, fLen: INTEGER; VAR t: ARRAY OF SHORTCHAR; VAR tW: INTEGER);
		VAR x, y: INTEGER;
	BEGIN
		WHILE fLen > 0 DO
			x := ORD(f[fR]);
			CASE x OF
			| 00H..24H: y := x
			| 26H..7FH: y := x
			| 0A0H: y := 0A0H
			| 0A2H: y := 0C0H
			| 0A3H..0A4H: y := x
			| 0A6H: y := 0DBH
			| 0ABH: y := 97H
			| 0ACH: y := 0DCH
			| 0ADH: y := 0A1H
			| 0B0H: y := 80H
			| 0B1H: y := 93H
			| 0B7H: y := 81H
			| 0BBH: y := 98H
			| 0BCH: y := 95H
			| 0BDH: y := 94H
			| 0D7H: y := 0DEH
			| 0F7H: y := 0DDH
			| 03B2H: y := 90H
			| 03C6H: y := 92H
			| 060CH: y := 0ACH
			| 061BH: y := 0BBH
			| 061FH: y := 0BFH
			| 0640H: y := 0E0H
			| 0651H: y := 0F1H
			| 0660H..0669H: y := x - 05B0H
			| 066AH: y := 25H
			| 2219H..221AH: y := x - 2197H
			| 221EH: y := 91H
			| 2248H: y := 96H
			| 2500H: y := 85H
			| 2502H: y := 86H
			| 250CH: y := 8DH
			| 2510H: y := 8CH
			| 2514H: y := 8EH
			| 2518H: y := 8FH
			| 251CH: y := 8AH
			| 2524H: y := 88H
			| 252CH: y := 89H
			| 2534H: y := 8BH
			| 253CH: y := 87H
			| 2592H: y := 84H
			| 25A0H: y := 0FEH
			| 0FE7DH: y := 0F0H
			| 0FE80H..0FE81H: y := x - 0FDBFH
			| 0FE82H: y := 0A2H
			| 0FE83H: y := 0C3H
			| 0FE84H: y := 0A5H
			| 0FE85H: y := 0C4H
			| 0FE8BH: y := 0C6H
			| 0FE8DH: y := 0C7H
			| 0FE8EH..0FE8FH: y := x - 0FDE6H
			| 0FE91H: y := 0C8H
			| 0FE93H: y := 0C9H
			| 0FE95H: y := 0AAH
			| 0FE97H: y := 0CAH
			| 0FE99H: y := 0ABH
			| 0FE9BH: y := 0CBH
			| 0FE9DH: y := 0ADH
			| 0FE9FH: y := 0CCH
			| 0FEA1H: y := 0AEH
			| 0FEA3H: y := 0CDH
			| 0FEA5H: y := 0AFH
			| 0FEA7H: y := 0CEH
			| 0FEA9H: y := 0CFH
			| 0FEABH: y := 0D0H
			| 0FEADH: y := 0D1H
			| 0FEAFH: y := 0D2H
			| 0FEB1H: y := 0BCH
			| 0FEB3H: y := 0D3H
			| 0FEB5H: y := 0BDH
			| 0FEB7H: y := 0D4H
			| 0FEB9H: y := 0BEH
			| 0FEBBH: y := 0D5H
			| 0FEBDH: y := 0EBH
			| 0FEBFH: y := 0D6H
			| 0FEC1H: y := 0D7H
			| 0FEC5H: y := 0D8H
			| 0FEC9H: y := 0DFH
			| 0FECAH: y := 0C5H
			| 0FECBH: y := 0D9H
			| 0FECCH: y := 0ECH
			| 0FECDH: y := 0EEH
			| 0FECEH: y := 0EDH
			| 0FECFH: y := 0DAH
			| 0FED0H: y := 0F7H
			| 0FED1H: y := 0BAH
			| 0FED3H: y := 0E1H
			| 0FED5H: y := 0F8H
			| 0FED7H: y := 0E2H
			| 0FED9H: y := 0FCH
			| 0FEDBH: y := 0E3H
			| 0FEDDH: y := 0FBH
			| 0FEDFH: y := 0E4H
			| 0FEE1H: y := 0EFH
			| 0FEE3H: y := 0E5H
			| 0FEE5H: y := 0F2H
			| 0FEE7H: y := 0E6H
			| 0FEE9H: y := 0F3H
			| 0FEEBH: y := 0E7H
			| 0FEECH: y := 0F4H
			| 0FEEDH: y := 0E8H
			| 0FEEFH: y := 0E9H
			| 0FEF0H: y := 0F5H
			| 0FEF1H: y := 0FDH
			| 0FEF2H: y := 0F6H
			| 0FEF3H: y := 0EAH
			| 0FEF5H..0FEF6H: y := x - 0FDFCH
			| 0FEF7H..0FEF8H: y := x - 0FE5EH
			| 0FEFBH..0FEFCH: y := x - 0FE5EH
			ELSE
				RETURN
			END;
			t[tW] := SHORT(CHR(y)); INC(tW);
			INC(fR);
			DEC(fLen)
		END
	END Encode;

	PROCEDURE NewEncoder* (): Codecs.Encoder;
		VAR e: Encoder;
	BEGIN
		NEW(e); RETURN e
	END NewEncoder;

	(* Decoder *)

	PROCEDURE (d: Decoder) Decode (IN f: ARRAY OF SHORTCHAR; VAR fR, fLen: INTEGER; VAR t: ARRAY OF CHAR; VAR tW: INTEGER; OUT state: BOOLEAN);
		VAR x, y: INTEGER;
	BEGIN
		WHILE fLen > 0 DO
			x := ORD(f[fR]);

			CASE x OF
			| 00H..24H: y := x
			| 25H: y := 066AH
			| 26H..7FH: y := x
			| 80H: y := 0B0H
			| 81H: y := 0B7H
			| 82H..83H: y := x + 2197H
			| 84H: y := 2592H
			| 85H: y := 2500H
			| 86H: y := 2502H
			| 87H: y := 253CH
			| 88H: y := 2524H
			| 89H: y := 252CH
			| 8AH: y := 251CH
			| 8BH: y := 2534H
			| 8CH: y := 2510H
			| 8DH: y := 250CH
			| 8EH: y := 2514H
			| 8FH: y := 2518H
			| 90H: y := 03B2H
			| 91H: y := 221EH
			| 92H: y := 03C6H
			| 93H: y := 0B1H
			| 94H: y := 0BDH
			| 95H: y := 0BCH
			| 96H: y := 2248H
			| 97H: y := 0ABH
			| 98H: y := 0BBH
			| 99H..9AH: y := x + 0FE5EH
			| 9DH..9EH: y := x + 0FE5EH
			| 0A0H: y := 0A0H
			| 0A1H: y := 0ADH
			| 0A2H: y := 0FE82H
			| 0A3H..0A4H: y := x
			| 0A5H: y := 0FE84H
			| 0A8H..0A9H: y := x + 0FDE6H
			| 0AAH: y := 0FE95H
			| 0ABH: y := 0FE99H
			| 0ACH: y := 060CH
			| 0ADH: y := 0FE9DH
			| 0AEH: y := 0FEA1H
			| 0AFH: y := 0FEA5H
			| 0B0H..0B9H: y := x + 05B0H
			| 0BAH: y := 0FED1H
			| 0BBH: y := 061BH
			| 0BCH: y := 0FEB1H
			| 0BDH: y := 0FEB5H
			| 0BEH: y := 0FEB9H
			| 0BFH: y := 061FH
			| 0C0H: y := 0A2H
			| 0C1H..0C2H: y := x + 0FDBFH
			| 0C3H: y := 0FE83H
			| 0C4H: y := 0FE85H
			| 0C5H: y := 0FECAH
			| 0C6H: y := 0FE8BH
			| 0C7H: y := 0FE8DH
			| 0C8H: y := 0FE91H
			| 0C9H: y := 0FE93H
			| 0CAH: y := 0FE97H
			| 0CBH: y := 0FE9BH
			| 0CCH: y := 0FE9FH
			| 0CDH: y := 0FEA3H
			| 0CEH: y := 0FEA7H
			| 0CFH: y := 0FEA9H
			| 0D0H: y := 0FEABH
			| 0D1H: y := 0FEADH
			| 0D2H: y := 0FEAFH
			| 0D3H: y := 0FEB3H
			| 0D4H: y := 0FEB7H
			| 0D5H: y := 0FEBBH
			| 0D6H: y := 0FEBFH
			| 0D7H: y := 0FEC1H
			| 0D8H: y := 0FEC5H
			| 0D9H: y := 0FECBH
			| 0DAH: y := 0FECFH
			| 0DBH: y := 0A6H
			| 0DCH: y := 0ACH
			| 0DDH: y := 0F7H
			| 0DEH: y := 0D7H
			| 0DFH: y := 0FEC9H
			| 0E0H: y := 0640H
			| 0E1H: y := 0FED3H
			| 0E2H: y := 0FED7H
			| 0E3H: y := 0FEDBH
			| 0E4H: y := 0FEDFH
			| 0E5H: y := 0FEE3H
			| 0E6H: y := 0FEE7H
			| 0E7H: y := 0FEEBH
			| 0E8H: y := 0FEEDH
			| 0E9H: y := 0FEEFH
			| 0EAH: y := 0FEF3H
			| 0EBH: y := 0FEBDH
			| 0ECH: y := 0FECCH
			| 0EDH: y := 0FECEH
			| 0EEH: y := 0FECDH
			| 0EFH: y := 0FEE1H
			| 0F0H: y := 0FE7DH
			| 0F1H: y := 0651H
			| 0F2H: y := 0FEE5H
			| 0F3H: y := 0FEE9H
			| 0F4H: y := 0FEECH
			| 0F5H: y := 0FEF0H
			| 0F6H: y := 0FEF2H
			| 0F7H: y := 0FED0H
			| 0F8H: y := 0FED5H
			| 0F9H..0FAH: y := x + 0FDFCH
			| 0FBH: y := 0FEDDH
			| 0FCH: y := 0FED9H
			| 0FDH: y := 0FEF1H
			| 0FEH: y := 25A0H
			ELSE
				d.st := -1; RETURN
			END;

			t[tW] := CHR(y); INC(tW);

			INC(fR);
			DEC(fLen)
		END;

		IF d.st = 0 THEN state := FALSE
		ELSIF d.st > 0 THEN state := TRUE
		ELSE HALT(100)
		END
	END Decode;

	PROCEDURE (d: Decoder) Reset;
	BEGIN
		d.st := 0
	END Reset;

	PROCEDURE NewDecoder* (): Codecs.Decoder;
		VAR d: Decoder;
	BEGIN
		NEW(d); d.Reset; RETURN d
	END NewDecoder;

END EncStdMap_cp864.