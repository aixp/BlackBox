MODULE LinNet ["libc.so.6"];

	(*
		A. V. Shiryaev, 2012.11

		GNU/Linux
		32-bit
	*)

	IMPORT Libc := LinLibc;

	CONST
		INVALID_SOCKET* = -1;
		SOCKET_ERROR* = -1;

		(* /usr/include/i386-linux-gnu/bits/socket.h *)
			SHUT_RD* = 0;
			SHUT_WR* = 1;
			SHUT_RDWR* = 2;
%%defs-sock%%
%%defs-socket%%
		(* /usr/include/asm-generic/socket.h *)
%%defs-so%%
		(* /usr/include/netinet/in.h *)
			INADDR_NONE* = -1;
%%defs-in%%
		(* /usr/include/asm-generic/param.h *)
			MAXHOSTNAMELEN* = 64; (* max length of hostname *)

		(* /usr/include/netdb.h *)
%%defs-netdb%%
		(* /usr/include/i386-linux-gnu/bits/typesizes.h *)
			__FD_SETSIZE = 1024;
			__NFDBITS = SIZE(SET) * 8;

	TYPE
		SOCKET* = INTEGER;

		(* /usr/include/i386-linux-gnu/bits/types.h *)
			socklen_t* = INTEGER;
		(* /usr/include/i386-linux-gnu/bits/sockaddr.h *)
			sa_family_t* = SHORTINT; (* unsigned short int *)
		(* /usr/include/netinet/in.h *)
			in_addr_t* = INTEGER;
			in_port_t* = SHORTINT;

		(* /usr/include/i386-linux-gnu/bits/socket.h *)
			sockaddr* = RECORD [untagged]
				sa_family: sa_family_t;
				sa_data: ARRAY [untagged] 14 OF SHORTCHAR;
			END;

		(* /usr/include/linux/in.h *)
(*
			in_addr* = INTEGER;
*)
			in_addr* = RECORD [untagged]
				S_un*: RECORD [union]
					S_un_b*: RECORD [untagged]
						s_b1*: SHORTCHAR;
						s_b2*: SHORTCHAR;
						s_b3*: SHORTCHAR;
						s_b4*: SHORTCHAR;
					END;
					S_un_w*: RECORD [untagged]
						s_w1*: SHORTINT;
						s_w2*: SHORTINT;
					END;
					S_addr*: in_addr_t;
				END;
			END;

		(* /usr/include/linux/in.h *)
			sockaddr_in* = RECORD [untagged]
				sin_family*: sa_family_t; (* address family *)
				sin_port*: SHORTINT; (* port number *)
				sin_addr*: in_addr; (* internet address *)
				__pad: ARRAY [untagged] 8 OF SHORTCHAR;
			END;

		(* /usr/include/netdb.h *)
			Ptrhostent* = POINTER TO hostent;
			hostent* = RECORD [untagged]
				h_name*: Libc.PtrSTR; (* official name of host *)
				h_aliases*: POINTER TO ARRAY [untagged] OF Libc.PtrSTR; (* alias list *)
				h_addrtype*: INTEGER; (* host address type *)
				h_length*: INTEGER; (* length of address *)
				h_addr_list*: POINTER TO ARRAY [untagged] OF POINTER TO ARRAY [untagged] OF in_addr; (* list of addresses from name server *)
			END;

		(* /usr/include/linux/time.h *)
		(* /usr/include/asm-generic/posix_types.h *)
			timeval* = RECORD [untagged]
				tv_sec*: INTEGER; (* seconds *)
				tv_usec*: INTEGER; (* microseconds *)
			END;

		(* /usr/include/i386-linux-gnu/sys/select.h *)
			__fd_mask = SET;
			fd_set* = ARRAY [untagged] __FD_SETSIZE DIV __NFDBITS OF __fd_mask;

	VAR
		h_errno*: INTEGER;

	PROCEDURE [ccall] socket* (domain: INTEGER; type: INTEGER; protocol: INTEGER): SOCKET;
	PROCEDURE [ccall] accept* (sockfd: SOCKET; VAR addr: sockaddr; VAR addrlen: socklen_t): SOCKET;
	PROCEDURE [ccall] bind* (sockfd: SOCKET; VAR addr: sockaddr; addrlen: socklen_t): INTEGER;
	PROCEDURE [ccall] connect* (sockfd: SOCKET; VAR addr: sockaddr; addrlen: socklen_t): INTEGER;
	PROCEDURE [ccall] listen* (sockfd: SOCKET; backlog: INTEGER): INTEGER;
	PROCEDURE [ccall] recv* (soskfd: SOCKET; buf: Libc.PtrVoid; len: Libc.size_t; flags: SET): Libc.ssize_t;
	PROCEDURE [ccall] send* (sockfd: SOCKET; buf: Libc.PtrVoid; len: Libc.size_t; flags: SET): Libc.ssize_t;
	PROCEDURE [ccall] shutdown* (sockfd: SOCKET; how: INTEGER): INTEGER;
	PROCEDURE [ccall] getsockopt* (sockfd: SOCKET; level: INTEGER; optname: SET; optval: Libc.PtrVoid; VAR optlen: socklen_t): INTEGER;
	PROCEDURE [ccall] setsockopt* (sockfd: SOCKET; level: INTEGER; optname: SET; optval: Libc.PtrVoid; optlen: socklen_t): INTEGER;

	PROCEDURE [ccall] htons* (hostshort: SHORTINT): SHORTINT;

	PROCEDURE [ccall] gethostbyname* (name: Libc.PtrSTR): Ptrhostent;
	PROCEDURE [ccall] inet_addr* (cp: Libc.PtrSTR): in_addr_t;

	PROCEDURE [ccall] getsockname* (sockfd: SOCKET; VAR addr: sockaddr; VAR addrlen: socklen_t): INTEGER;

	PROCEDURE [ccall] hstrerror* (err: INTEGER): Libc.PtrSTR;

(*
	PROCEDURE FD_ZERO (VAR set: Net.fd_set);
		VAR i: INTEGER;
	BEGIN
		i := 0; WHILE i < LEN(set) DO set[i] := {}; INC(i) END
	END FD_ZERO;

	PROCEDURE FD_SET (fd: Net.SOCKET; VAR set: Net.fd_set);
	BEGIN
		INCL(set[fd DIV 32], fd MOD 32)
	END FD_SET;
*)

	PROCEDURE [ccall] select* (nfds: INTEGER; VAR [nil] readfds: fd_set; VAR [nil] writefds: fd_set; VAR [nil] exceptfds: fd_set; VAR timeout: timeval): INTEGER;

END LinNet.
